/**
 * Copyright GE
 */
package com.ge.treasury.mypayments;

import java.io.IOException;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Scope;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.web.multipart.MultipartResolver;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.ge.treasury.mypayments.exceptions.DBException;
import com.mchange.v2.c3p0.ComboPooledDataSource;

/**
 * 
 * Configuration Class for MyPayments datasource
 * 
 * @author MyPayments Dev team
 *
 */
@Configuration
@MapperScan(value = "com.ge.treasury.mypayments.mapper.payment", sqlSessionFactoryRef = "sqlSessionFactory")
public class PaymentConfiguration {
    @Bean
    @Primary
    @ConfigurationProperties(prefix = "jdbcPayment")
    public DataSource dataSourceExp() {
        return DataSourceBuilder.create().type(ComboPooledDataSource.class)
                .build();
    }

    @Primary
    @Bean(name = "sqlSessionFactory")
    @Scope("singleton")
    public SqlSessionFactory sqlSessionFactory() {
        try {
            final PathMatchingResourcePatternResolver pathResolver = new PathMatchingResourcePatternResolver();
            final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
            sessionFactory.setDataSource(dataSourceExp());
            sessionFactory.setMapperLocations(pathResolver
                    .getResources("classpath*:**/mapper/payment/*.xml"));
            return sessionFactory.getObject();
        } catch (final IOException e) {
            throw new DBException("Error when reading the Resources.", e);
        } catch (final Exception e) {
            throw new DBException("Error when getting the Session Factory.", e);
        }
    }
    
    @Bean
    public MultipartResolver multipartResolver() {
    	//Sonar Fixes: Local Variables should not be declared and then immediately returned or thrown
        return new CommonsMultipartResolver();
    }

}
